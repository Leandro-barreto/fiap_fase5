# Docker Compose configuration for the hiring prediction API, Prometheus
# and Grafana.  This file wires together the three services without
# creating dependency cycles and omits the obsolete `version` field.

services:
  # FastAPI application exposing the hiring prediction endpoints and
  # Prometheus metrics.  The application uses Uvicorn to serve HTTP
  # requests.  Metrics are available at /metrics and the landing page
  # at /.  If you mount your source code for development, add
  # `--reload` to the command.
  api:
    build: .
    container_name: contratacao-api
    command: uvicorn api.main:create_app --host 0.0.0.0 --port 8000
    ports:
      - "8000:8000"
    environment:
      - ENABLE_METRICS=true
      - PYTHONUNBUFFERED=1
    # Healthcheck verifies that the server is responding.  The base
    # image doesn't include wget/curl, so this uses Python's urllib
    # instead.  Remove the healthcheck if it's not needed or if you
    # install curl/wget in your Dockerfile.
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request, sys; import json; url='http://localhost:8000/health'; resp=urllib.request.urlopen(url); sys.exit(0 if resp.getcode()==200 else 1)"]
      interval: 15s
      timeout: 5s
      retries: 5

  # Prometheus server to scrape metrics from the API.  The custom
  # configuration file is mounted at runtime.  Prometheus will try
  # scraping the API as soon as it is available.
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--storage.tsdb.retention.time=15d"
      - "--web.enable-lifecycle"
    volumes:
      - prom-data:/prometheus
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"

  # Grafana with provisioning and dashboards configured.  The
  # provisioning directories are mounted read-only and the data
  # directory persists Grafana state across restarts.  Default
  # credentials are provided via environment variables.
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./docker/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus

volumes:
  prom-data:
  grafana-data: